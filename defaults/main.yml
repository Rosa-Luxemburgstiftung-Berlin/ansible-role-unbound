---
# defaults file for rls.unbound

unbound_packages:
  - unbound
  - dns-root-data

# just change this if you know what you are doing ...
unbound_cfg_dir_main: /etc/unbound
unbound_cfg_dir_incl: "{{ unbound_cfg_dir_main }}/unbound.conf.d"
unbound_cfg_file_main: "{{ unbound_cfg_dir_main }}/unbound.conf"

# this will be removed
unbound_remove_files_incl:
  - root-auto-trust-anchor-file.conf

# list of cfg templates to use
unbound_cfg_templates_incl:
  - 01server.conf
  - rebind.conf

# we keep the defaults minimal,
# so you should ensure to adjust them to your needs
# before you deploy this role
# example:
#  https://raw.githubusercontent.com/NLnetLabs/unbound/master/doc/example.conf.in
undbound_config:
  # server options
  server:
    verbosity: 1
    port: 53
    # interface: "{{ ansible_interfaces }}"  # enable this to use all interfaces defined at deploy
    access-control:
      - 127.0.0.1/8 allow
      - "::1/64 allow"
    # The following line will configure unbound to perform cryptographic
    # DNSSEC validation using the root trust anchor.
    # auto-trust-anchor-file: "/var/lib/unbound/root.key"
  # remote-control options
  remote-control: {}
    # control-enable: "yes"
    # control-interface: 127.0.0.1
  # stub-zone options list, each with a name: and zero or more hostnames or IP addresses
  #   if you use just one list entry, you can define it directly as a dict
  stub-zone: []
  # forward-zone options list, each with a name: and zero or more hostnames or IP addresses
  #   if you use just one list entry, you can define it directly as a dict
  forward-zone: []
  # auth-zone options list, each one must have a name:
  #   if you use just one list entry, you can define it directly as a dict
  auth-zone: []
  # view options list. each with a name: and zero or more local-zone and local-data elements
  #   if you use just one list entry, you can define it directly as a dict
  view: []
  # optional further sections for unbound like
  # python: []
  # dynlib-file: []
